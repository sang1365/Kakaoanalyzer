# Generated by Django 3.0.5 on 2020-06-02 08:03

# Generated by Django 3.0.5 on 2020-06-02 07:24

from django.db import migrations
from datetime import datetime
import re
import json
import os
import datetime


class KakaotalkJsonParser:
    # KakaotalkJsonParser(filename, mod=('pc' or 'mobile'))
    def __init__(self, mod='mobile'):
        try:
            if mod != "pc" and mod != "mobile":
                Exception(mod + " mod is not supported. only 'pc' and 'mobile' mod supported")
            self.mod = mod
        except Exception as e:
            print("err : " + e)

        if mod == "pc":
            self.date_form = re.compile("")
        elif mod == "mobile":
            self.date_form = re.compile("[0-9]{4}\.([0-9]| ){2,3}\.([0-9]| ){2,3}\. (오후|오전)([0-9:\s]+)")

    def set_mod(self, mod):
        try:
            if mod != "pc" and mod != "mobile":
                Exception(mod + " mod is not supported. only 'pc' and 'mobile' mod supported")
            self.mod = mod
        except Exception as e:
            print("err : " + e)

        if mod == "pc":
            self.date_form = re.compile("")
        elif mod == "mobile":
            self.date_form = re.compile("[0-9]{4}\.([0-9]| ){2,3}\.([0-9]| ){2,3}\. (오후|오전)([0-9:\s]+)")
        self.mod = mod

    # 파일을 dict 형태로 파싱해서 반환합니다.unit은 묶는 단위를 나타냅니다.
    def parse(self, filename, unit="chat"):
        result = {};
        os.chdir("C:\\Users\\sang1\\PycharmProjects\\test\\projects\\mysite\\pyboo\\migrations")
        lines = open(filename, 'r', encoding='UTF8')
        systemmsg1 = "초대했습니다."
        systemmsg2 = "나갔습니다."

        for line in lines:
            # line = line.encode("utf-8")
            # line = line.decode("utf-8")
            if systemmsg1 in line:  # 시스템 메세지 제거("~가 ~를 초대했습니다.")
                continue
            if systemmsg2 in line:  # 시스템 메세지 제거("~가 나갔습니다.")
                continue

            date = self.date_form.search(line)
            if not date:  # 매칭을 찾지 못하였을때
                continue
            if date.start() != 0:  # 날짜가 처음에 나오지 않을 때
                continue
            date_string = date.group().replace("오전", "AM").replace("오후", "PM")
            date = datetime.strptime(date_string, "%Y. %m. %d. %p %I:%M")
            date_processed = str(date)
            speaker = re.compile(", [^:]* : ").search(line).group().replace(", ", "").replace(" : ", "")
            chat = re.compile(": .*").search(line).group().replace(": ", "")

            # debuging code
            # print(f"date:{date_processed} , id:{speaker}, content:{chat}")
            if unit == 'chat':
                if 'chat_list' not in result:
                    result['chat_list'] = []
                result['chat_list'].append({"timestamp": str(date), "speaker": speaker, "chat": chat})
            elif unit == 'day':
                if date.strftime("%Y-%m-%d") not in result:
                    result[date.strftime("%Y-%m-%d")] = []
                result[date.strftime("%Y-%m-%d")].append({"timestamp": str(date), "speaker": speaker, "chat": chat})
            elif unit == 'month':
                if date.strftime("%Y-%m") not in result:
                    result[date.strftime("%Y-%m")] = []
                result[date.strftime("%Y-%m")].append({"timestamp": str(date), "speaker": speaker, "chat": chat})
            elif unit == 'year':
                if date.strftime("%Y") not in result:
                    result[date.strftime("%Y")] = []
                result[date.strftime("%Y")].append({"timestamp": str(date), "speaker": speaker, "chat": chat})

        return result

    # 결과를 json 파일로 반환하는 함수
    # 결과 파일을 열어보면 유니코드 코드가 두두두두 찍혀있는 끔찍한 광경을 보실 수 있습니다.
    # 고쳐야하나?()
    def parse_to_json_file(self, filename_input, filename_output, unit='chat'):
        json_file_name = filename_output + ".json"
        file_output = open(json_file_name, mode="w", encoding="utf-8")

        # json파일 저장 후 데스크탑에서 확인하기 위한 코드
        with open(json_file_name, 'w', encoding="utf-8") as make_file:
            json.dump(self.parse(filename_input, unit), make_file, ensure_ascii=False, indent=4)

        json.dump(self.parse(filename_input, unit), file_output, indent=4)
        file_output.close()

    def user_list(self, filename):
        chat_list = self.parse(filename, 'chat')["chat_list"]
        user_list = []
        for chat in chat_list:
            user = chat['speaker']
            if user not in user_list:
                user_list.append(user)
        return user_list

    def len(self, filename):
        chat_list = self.parse(filename, 'chat')["chat_list"]
        return len(chat_list)


# 테스트용 코드
#k_parser = KakaotalkJsonParser("mobile")
# pprint(k_parser.len("jongseol.txt"))
#k_parser.parse_to_json_file("jongseol.txt", "jongseol")

emoji_pattern = re.compile("["
                           u"\U0001F600-\U0001F91C"  # emoticons
                           u"\U0001F300-\U0001F5FF"  # symbols & pictographs
                           u"\U0001F680-\U0001F6FF"  # transport & map symbols
                           u"\U0001F1E0-\U0001F1FF"  # 1flags (iOS)
                           u"\u3131-\u3163"  # 자모
                           "]+", flags=re.UNICODE)

# 테스트용 코드
#k_parser = KakaotalkJsonParser("mobile")
# pprint(k_parser.len("jongseol.txt"))
#k_parser.parse_to_json_file("jongseol.txt", "jongseol")


# db에 넣는 과정 - 미완
def send_dt(apps, schema_editor):
    #chat_data, chat_title 모델 호출
    chat_title = apps.get_model('pyboo', 'chat_title')
    chat_data = apps.get_model('pyboo', 'chat_data')

    db_alias = schema_editor.connection.alias

    data = KakaotalkJsonParser("mobile").parse(filename='jongseol.txt')
    #print(data.values())

    # 테스트용 코드
    k_parser = KakaotalkJsonParser("mobile")
    # pprint(k_parser.len("jongseol.txt"))
    k_parser.parse_to_json_file("jongseol.txt", "jongseol")
    print('33333333333333333333333333333333333333333333333333333333333333')

    index = 0
    emojicnt = 0
    titlenm = '종설'

    #데이터 업데이트
    chat_title.objects.using(db_alias).bulk_create([
        chat_title(title=titlenm, update_date=datetime.now())
    ])

    title_id = chat_title.id

    #데이터 수정
    '''chat_title.title = titlenm
    chat_title.update_date = datetime.now()'''

    for chats in data['chat_list']:
        print(chats['speaker'])
        index += 1

        chats['chat'] = chats['chat'].replace("'", '"')
        chats['chat'] = emoji_pattern.sub(r'', chats['chat'])

        #데이터 수정
        '''chat_data.idx = index
        chat_data.timestamp = chats['timestamp']
        chat_data.speaker = chats['speaker']
        chat_data.chat = chats['chat']
        chat_data.chat_title_id = title_id
        chat_data.emoji_cnt = emojicnt
        chat_data.insert_time = datetime.now()

        chat_data.save()'''

        #데이터 업데이트
        chat_title.objects.using(db_alias).bulk_create([
        chat_data(idx=index, timestamp=chats['timestamp'], speaker=chats['speaker'], chat=chats['chat'],
                  chat_title_id=title_id, emoji_cnt=emojicnt, insert_time=datetime.now())
        ])

        if not data : break



class Migration(migrations.Migration):

    dependencies = [
        ('kktanalyzer', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(send_dt)
    ]